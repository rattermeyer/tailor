package utils

import (
	"bytes"
	"crypto"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strings"

	"github.com/opendevstack/tailor/cli"
	"golang.org/x/crypto/openpgp"
	"golang.org/x/crypto/openpgp/armor"
	"golang.org/x/crypto/openpgp/packet"
)

func CreateEntity(name, email string) (*openpgp.Entity, error) {
	var e *openpgp.Entity
	conf := &packet.Config{
		RSABits:       4096,
		DefaultHash:   crypto.SHA256,
		DefaultCipher: packet.CipherFunction(packet.CipherAES128),
	}
	e, err := openpgp.NewEntity(name, "Generated by tailor", email, conf)
	if err != nil {
		return nil, err
	}

	// Sign all the identities
	for _, id := range e.Identities {
		err := id.SelfSignature.SignUserId(id.UserId.Id, e.PrimaryKey, e.PrivateKey, nil)
		if err != nil {
			return nil, err
		}
	}
	return e, nil
}

func PrintPublicKey(entity *openpgp.Entity, filename string) error {
	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	w, err := armor.Encode(f, openpgp.PublicKeyType, nil)
	if err != nil {
		return err
	}
	defer w.Close()
	err = entity.Serialize(w)
	if err != nil {
		return err
	}
	_, err = io.WriteString(f, "\n")
	if err != nil {
		return err
	}
	return nil
}

func PrintPrivateKey(entity *openpgp.Entity, filename string) error {
	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	w, err := armor.Encode(f, openpgp.PrivateKeyType, nil)
	if err != nil {
		return err
	}
	err = entity.SerializePrivate(w, nil)
	if err != nil {
		return err
	}
	w.Close()
	_, err = io.WriteString(f, "\n")
	if err != nil {
		return err
	}
	return nil
}

// Assembles entity list from keys in given files
func GetEntityList(keys []string, passphrase string) (openpgp.EntityList, error) {
	cli.DebugMsg("Assemble entity list from", strings.Join(keys, ","))
	entityList := openpgp.EntityList{}
	for _, filename := range keys {
		keyringFileBuffer, _ := os.Open(filename)
		defer keyringFileBuffer.Close()
		l, err := openpgp.ReadArmoredKeyRing(keyringFileBuffer)
		if err != nil {
			return entityList, fmt.Errorf(
				"Reading key '%s' failed: %s",
				filename,
				err,
			)
		}
		entity := l[0]

		// Decrypt private key using passphrase
		passphraseBytes := []byte(passphrase)
		if entity.PrivateKey != nil && entity.PrivateKey.Encrypted {
			cli.DebugMsg("Decrypting private key using passphrase")
			err := entity.PrivateKey.Decrypt(passphraseBytes)
			if err != nil {
				return entityList, fmt.Errorf("Failed to decrypt key: %s", err)
			}
		}
		for _, subkey := range entity.Subkeys {
			if subkey.PrivateKey != nil && subkey.PrivateKey.Encrypted {
				err := subkey.PrivateKey.Decrypt(passphraseBytes)
				if err != nil {
					return entityList, fmt.Errorf(
						"Failed to decrypt subkey: %s", err,
					)
				}
			}
		}

		entityList = append(entityList, entity)
	}
	return entityList, nil
}

// Encrypts secret with all public keys and base64-encodes the result.
func Encrypt(secret string, entityList openpgp.EntityList) (string, error) {
	// Encrypt message using public keys
	buf := new(bytes.Buffer)
	w, err := openpgp.Encrypt(buf, entityList, nil, nil, nil)
	if err != nil {
		return "", fmt.Errorf("Encrypting '%s' failed: %s", secret, err)
	}
	_, err = w.Write([]byte(secret))
	if err != nil {
		return "", err
	}
	err = w.Close()
	if err != nil {
		return "", err
	}

	// Return as base64 encoded string
	bytes, err := ioutil.ReadAll(buf)
	if err != nil {
		return "", err
	}
	str := base64.StdEncoding.EncodeToString(bytes)
	return str, nil
}

// Decrypts the base64-encoded string end decrypts with the private key.
func Decrypt(encoded string, entityList openpgp.EntityList) (string, error) {
	// Decode bas64-encoded string
	encrypted, err := base64.StdEncoding.DecodeString(encoded)
	if err != nil {
		return "", fmt.Errorf("Decoding '%s' failed: %s", encoded, err)
	}

	// Decrypt encrypted message
	buf := bytes.NewBuffer([]byte(encrypted))
	md, err := openpgp.ReadMessage(buf, entityList, nil, nil)
	if err != nil {
		return "", fmt.Errorf("Decrypting '%s' failed: %s", encoded, err)
	}
	bytes, err := ioutil.ReadAll(md.UnverifiedBody)
	return string(bytes), err
}
